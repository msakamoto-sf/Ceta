HelpDesigner Project Ver1.45

//Project//
00000000main
Ceta ヘルプ
風晶
0
0
3
0
windows{
main="Cetaヘルプ",,27648,(r14876671),(r33023)
}end
config{
BrowseButtons()
}end

//Page//
HLP000001
初めての方へ
初めての方へ
False
0


1
begin{
\keepn
初めての方へ
\par\pard

　この度は汎用エディタ「Ceat(ツェータ）」をお求めいただき有り難うございます。

　Cetaは秀丸やCPadのように、エディタとしての機能を徹底したわけでも、特定の開発環境との連携を目指したわけでもありません。そのような{\fs44 一般受けするソフト}と考えていると{\fs44 イタイ目を見ます。}

　Cetaは、メモ帳をMDI化し、プラスαで以下の機能を実装しただけです。

１．拡張子と文字種に応じた色分け設定の関連づけ
２．外部コマンドの利用（実行ファイル、コマンドラインオプション、環境変数全てを指定可能で、なおかつマクロによるファイル名（ロング、ショート選択可能、ダブルクォーテーションで囲む機能のオン・オフ）展開
３．外部ヘルプファイルの利用

　率直に言ってCetaはデフォルト設定のままでは全く役立たずです。コマンドを登録し、適切にコマンドラインオプションやマクロを操り、ヘルプを登録し、文字色設定をカスタマイズすることによって初めて「味がでる」エディタです。

　Cetaはエディタとして決して優れたものではありません。基本的な機能は備えていますが。
　Cetaを優れたエディタ{\fs36 だと思いこむ}のは、ユーザー自身です。

\qc {\fs48\cf6 噛めば噛むほど味が出ます！！}
\par\pard

\qc {\fs44\cf6 とにかく噛みしめてください。出てくる味が、あなたの味です。（何か厭な表現）
}
\par\pard
　本ヘルプの「チュートリアル」をご覧ください。Borland C++Compilerのインストール、Cetaへの登録を通して、そのおもしろさを感じていただき、Cetaをメモ帳代わりに使っていただけると幸いです。


このヘルプ内の文章中に含まれる社名、製品名は、その版権所有者の商標または登録商標です。
}end

//Page//
HLP000002
お使いになる前に

False
1


2
begin{

}end

//Page//
HLP000003
動作環境
動作環境
False
0


3
begin{
\keepn
動作環境
\par\pard


動作環境

OS：Windows98SE、Windows 2000 Professional、WindowsXPHomeEditionで動作確認を行っています。

CPU：Pentium以上であれば特に問題ないはずです。あまりに遅すぎるとスクロールなどが鈍くなるかもしれません。

HDD：実行ファイルとドキュメント、設定ファイル併せて５ＭＢ程度あればインストールできます。

メモリ：Windowsが普通に動いているような環境なら問題ありません。


}end

//Page//
HLP000005
コンパイラ
コンパイラ
False
0


5
begin{
\keepn
コンパイラについて
\par\pard


{\b Cetaはコンパイラ機能がありません。}
　コンパイラとは、人間に分かる言葉で書かれたプログラムの手順書（ソースコード）をコンピュータに理解可能な言葉へ翻訳するためのソフトです。プログラムを始めるにはまずコンパイラを用意する必要があります。
　代表的なコンパイラを以下に挙げますので、ホームページや雑誌、入門書等を参考にしてお使いのパソコンにインストールして下さい。

例えばC,C言語を勉強するなら、
{\uldb C++Compiler　(ボーランド）}{\v !ExecFile("http://www.borland.co.jp/cppbuilder/freecompiler/index.html")}
のホームページからフリーのコンパイラが入手できます。

有償（代金が必要）のコンパイラとしては、
{\uldb Microsoft Visual C++.NET（マイクロソフト）}{\v !ExecFile("http://www.microsoft.com/japan/developer/visualc/")}
{\uldb Borland C++ Builder （ボーランド）}{\v !ExecFile("http://www.borland.co.jp/")}
が有名で、C,C++言語用としてWindowsで広く使われています。

　Cetaは玄人好みに作られていますので、全くの初心者には敷居が高いと思われます。
　本ヘルプの「チュートリアル」で、Borland C++ Compilerを例に取り、コンパイラのインストール、基本設定、Cetaへの登録、コンパイルに至る一連の手順を紹介していますので、ぜひそちらをご一読ください。

《　各種コンパイラ　》

Borland C++ Compiler 5.5 ：{\uldb http://www.borland.co.jp/cppbuilder/freecompiler/}{\v !ExecFile("http://www.borland.co.jp/cppbuilder/freecompiler/")}

Java 2 SDK Standard Edition Version 1.4 ：{\uldb http://java.sun.com/j2se/1.4/ja/}{\v !ExecFile("http://java.sun.com/j2se/1.4/ja/")}

Salford FTN77 Personal Edition Compiler：{\uldb http://www.salford.co.uk/compilers/ftn77pe/index.shtml}{\v !ExecFile("http://www.salford.co.uk/compilers/ftn77pe/index.shtml")}

Free Pascal：{\uldb http://www.freepascal.org/download.html}{\v !ExecFile("http://www.freepascal.org/download.html")}


《　文字コード変換　》

nkf Win32版 ：{\uldb http://www.vector.co.jp/soft/win95/util/se031296.html}{\v !ExecFile("http://www.vector.co.jp/soft/win95/util/se031296.html")}

超高速漢字コード変換プログラムＱＫＣ：{\uldb http://hp.vector.co.jp/authors/VA000501/}{\v !ExecFile("http://hp.vector.co.jp/authors/VA000501/")}

}end

//Page//
HLP000052
設定ファイル
設定ファイル
False
0


52
begin{
\keepn
設定ファイル
\par\pard


　Cetaはバージョン2.2、 2.5、 そして今回の 2.6の間で大きく設定ファイルの構成が変わっています。
　2.2、2.5の間では完全に互換性が無く、2.2の設定ファイルを2.5で読み込むとエラーが発生していました。
　しかし今回の2.6ではその点は改善され、異なるバージョンの設定ファイルを読み込んだ場合、以前のバージョンで使われていた値は無視され、Ceta本体に納められているデフォルト値を使うようになっています。

　んで、デフォルト値を最初使った方が良いので。
　{\b ceta.iniが無い状態で最初は起動してください。}終了時に適切なデフォルト値でceta.iniを生成してくれます。以降はそのceta.iniを利用してください。

　Cetaでは二種類の設定ファイルを使用します。
　一つは、Ceta本体の設定ファイルである「ceta.ini」。
　もう一つは、文字色設定ファイルと呼ばれるもので、拡張子、すなわちファイルタイプに応じて適用される文字の色分け方法が記述されたファイルです。

　両方ともテキストで記述されていますので、人間が閲覧、編集することが可能です。
　ある程度設定をいじくった段階で設定ファイルを眺めていただくと、Cetaの内部でどう設定が動いているのかイメージしやすくなると思いますのでぜひお試しください。

　まとめると、

１．バージョンの異なる設定ファイルを読み込んでもエラーにならない。只し、全てデフォルト値になる。
２．設定ファイルが存在しない場合、終了時に新たに作成する。
３．本体設定ファイル、文字色設定ファイルともテキストで書かれているので、人間が手動で変更することも可能。

　設定ファイル内で使用している項目名はなるべく分かりやすい名称を使うようにしましたので、ぜひ眺めて、手動変更してみてください。ただし自己責任で。
}end

//Page//
HLP000006
著作権・転載条件など
著作権・転載条件など
False
0


6
begin{
\keepn
著作権・転載条件など
\par\pard


Cetaはフリーソフトです。著作権は作者である風晶が保有しています。

 使用、転載、及び配布に制限はありません（雑誌等への収録も自由です）が、転載、配布時は後でもいいので必ず転載先等の連絡をお願いします。また、転載、配布時は書庫ファイル名及び実行ファイル本体(Ceta.exe)、ヘルプファイルを改変することを禁止します。

作者への連絡方法は[サポート情報]にて確認してください。

このソフトウェアを使用して発生したいかなる損害にも、作者は責任を負わないものとします（各自の自己責任で使用してください）。

このソフトウェアにバグ等の不具合が発見されても、作者はバージョンアップの責任及び義務を負わないものとします。


このヘルプ内の文章中に含まれる社名、製品名は、その版権所有者の商標または登録商標です。

}end

//Page//
HLP000014
サポート情報
サポート情報
False
0


14
begin{
\keepn
サポート情報
\par\pard


掲示板によるサポートを行っております。
{\uldb http://www.c-hino.org/fenjin/ceta/reef.php}{\v !ExecFile("http://www.c-hino.org/fenjin/ceta/reef.php")}
までお寄せ下さい。

メールはこちらまでお願いします。
{\uldb fenjin@nifty.com}{\v !ExecFile("mailto:fenjin@nifty.com")}
HTMLメールはご遠慮ください。

とりあえず本ヘルプの「チュートリアル」を一読していただいて、それを参考にいろいろいじくってみてください。

}end

//Page//
HLP000042
開発環境

False
0


42
begin{
\keepn
開発環境
\par\pard


開発マシン
VMware上のWindows 2000
CPU：Athlon 1.3GHz
メモリ：256MB (仮想マシンに割り当てている分）
HDD：10GB (仮想マシンに割り当てている分）

開発ソフト
Borland C++Builder 4.0 Professional
HelpDesigner Version 1.58
Borland C++ Compiler 5.5


独自にインストールし、使用したコンポーネント
TEditor
TKeyMacro
TEditorEx
bmRegExp
shbex201

参考文献

・「Borland C++ Builder 4 開発者ガイド」（Borland C++ Builder 4付属ドキュメント）
INPRISE (現Borland）

・Microsoft Programmer's Reference（C++Builder付属Helpドキュメント)
（超役に立ってる。バイブル。）

・「独習C++　改訂版」
ハーバート・シルト著　トップスタジオ訳・神林靖監修　翔泳社
（すごい役に立った。）

・「C/C++プログラマのためのWindows95プログラミング」
ハーバート・シルト著　柏原正三　訳・監修　翔泳社
（すごい役に立った。）

・「Cプログラミング診断室」
藤原博文　著　技術評論社
（超役に立ってる。バイブル。）

・「Cプログラミング専門課程」
藤原博文　著　技術評論社
（超役に立ってる。バイブル。）

・「C++Builder 入門」
青山学　著　ソフトバンク

・「C++Builder で始めるWindowsプログラミング」
藤田伸二著　インプレス

}end

//Page//
HLP000037
謝辞
謝辞
False
0


37
begin{
\keepn
{\b Special Thanks} to...
\par\pard

{\b Delphian World}：{\uldb http://home1.infonia.ne.jp/~delphian/delphi/}{\v !ExecFile("http://home1.infonia.ne.jp/~delphian/delphi/")}
・・・本田さんのTEditorの存在を教えて下さいました。

{\b 本田勝彦さん}：{\uldb http://member.nifty.ne.jp/~katsuhiko/}{\v !ExecFile("http://member.nifty.ne.jp/~katsuhiko/")}
・・・TEditorという素晴らしいエディターコンポーネントを作成して下さいました。本ソフトはTEditorがなければ完成しなかったでしょう。

{\b bmonkeyさん}：{\uldb http://homepage1.nifty.com/bmonkey/delphi/delphi.html}{\v !ExecFile("http://homepage1.nifty.com/bmonkey/delphi/delphi.html")}
・・・正規表現を使った文字列検索/操作コンポーネント集「bmRegExp017」

{\b Kmさん}：{\uldb http://homepage2.nifty.com/Km/}{\v !ExecFile("http://homepage2.nifty.com/Km/")}
・・・TEditorEx Ver 2.08

{\b 安達恒司さん}：{\uldb http://www.marimo.or.jp/~koji27/}{\v !ExecFile("http://www.marimo.or.jp/~koji27/")}
・・・始めてヘルプを作成するに際して、氏のHelpDesignerを使わせていただきました。高機能にしてフリーウェアという素晴らしいソフトです。

{\b C++Builder ML}：{\uldb http://www.sfdata.ne.jp/windev/cbuilder/index.html}{\v !ExecFile("http://www.sfdata.ne.jp/windev/cbuilder/index.html")}
・・・膨大な情報の中、コンパイラ起動に関する外部プログラム起動に関して大変貴重な情報を得ることが出来ました。

{\b Delphi Tips}：{\uldb http://www2.big.or.jp/~osamu/Delphi/Tips/}{\v !ExecFile("http://www.sfdata.ne.jp/windev/cbuilder/index.html")}
・・・「痒いところに手が届く」ヒント、用例、サンプルはなぜかDelphiの方にたくさんありました。特にエクスプローラからのファイルのドロップ、二重起動の防止とMDIの連携はこのページのTipsの218, 268, 269番のTipsを参考にしました。

{\b Nifty sinpriseフォーラムのみなさん----かとちんさん、Bsakuさん、十兵衛さん、FUUさん、KoHalさん、odrさん、渋木宏明（ひどり）さん、UnDocさん}
・・・この方達の貴重な助言をいただかなければ、上に述べた方々やサイトに巡り会うこともなく、また、独学で膨大かつ無駄な時間を割いていたことでしょう。

D.T.氏
・・・Windows XPでの動作確認に大変お世話になりました。本当に感謝しています。ついでにヘルプドキュメントの整理も。

Okixの山口君
・・・動作テストのためパソコンを何度も使わせていただきました。この動作テストがなければ、実行時ランタイムライブラリの事を気づくことはなかったでしょう。

{\b\fs28\cf6 Last Great Special Thanx to......
My Family, to my parents, grand mother, grand father, sister, brother}
}end

//Page//
HLP000028
チュートリアル

False
1


28
begin{

}end

//Page//
HLP000036
チュートリアル
チュートリアル
False
0


36
begin{
\keepn
チュートリアル
\par\pard

どうやってCetaを使い始めるかを何となくまとめてみました。
お役に立てれば幸いです。

シチュエーションはこうです。
「Cetaの作者、風晶が、インターネットのできるパソコンにCetaをインストールし終わってから、プログラミングを始めるまで。」

というわけで、Ceta自体のインストールは終わっているものとします。
つまり、添付のinstall.txtの手順通りにCetaをceta.ini無しで起動し、ファイルタイプの登録を終えた状態である、と仮定しています。
また、Cetaの利用目的がプログラミング以外である方は４，５，６，９番だけ読んでいただいても問題ありません。

{\cf6 本チュートリアルをご利用いただく前に、必ずreadme.txtとinstall.txtをお読みください。}Ceta初回起動時に必要な手順が書かれてあります。手順通りに「ファイルタイプ」を最低一つ登録しないと、Cetaはファイルを開くことができません。

{\uldb １．Borland C++ Compilerのインストール}{\v HLP000038}

{\uldb ２．Cetaの設定}{\v HLP000040}

{\uldb ３．「Hello, World!」}{\v HLP000044}

{\uldb ４．Internet Explorerを登録してみる}{\v HLP000053}

{\uldb ５．文字色の設定を変えてみる}{\v HLP000054}

{\uldb ６．ヘルプを登録してみる}{\v HLP000055}

{\uldb ７．java コンパイラを登録してみる}{\v HLP000055}

{\uldb ８．FORTRAN 77 を登録してみる}{\v HLP000055}

{\uldb ９．QKCを登録してみる}{\v HLP000055}（ＳＪＩＳ←→EUC変換）

一通りご覧いただいた後、ぜひ、ceta.exeへのショートカットをSendToへ入れてあげてください。

Cetaは外部プログラムとの連携により、他のエディタには見られないおもしろさを秘めています。
ぜひご覧下さいませ。
}end

//Page//
HLP000038
Borland C++ Complierのインストール
Borland C++ Complierのインストール
False
0


38
begin{
\keepn
１．Borland C++ Compilerのインストール
\par\pard



（１）Borland C++ Compilerをダウンロードします。

Borland C++ Compiler 5.5 ：{\uldb http://www.borland.co.jp/cppbuilder/freecompiler/}{\v !ExecFile("http://www.borland.co.jp/cppbuilder/freecompiler/")}


（２）ダウンロードしたEXEファイルを実行して、C:\\の真下あたりにでも入れときます。レジストリは汚しません。

　とりあえず今回は
　C:\\Program Files\\Borland\\bcc55
　の中に、BinだのIncludeだのが作られました。（と、想像して下さい。）


（３）設定ファイルを作ります。テキストファイルなのでメモ帳なんかを使って下さい。

\pard\box\brdrs -I"C:\\Program Files\\Borland\\bcc55\\Include"\line
-L"C:\\Program Files\\Borland\\bcc55\\Lib"\par\pard

　と入力したものを
　C:\\Program Files\\Borland\\Bin\\bcc55\\Bin\\bcc32.cfg
　C:\\Program Files\\Borland\\Bin\\bcc55\\Bin\\ilink32.cfg
　という名前で保存します(同じ内容で名前の違うファイルを2つ作ります)。
　
　注)ここに書いたことは、Borland C++ Compilerのreadme.txtにも書いてあります。


（４）動作確認。

　DOSプロンプトを開きます。

　> CD "C:\\Program Files\\Borland\\bcc55\\Bin"
　> bcc32.exe

　何でもいいのでなんだかいろいろメッセージが表示されればオッケーです。

　これはここまででおしまいです。次、「Cetaの設定」に行きます。

}end

//Page//
HLP000040
Cetaの設定
Cetaの設定
False
0


40
begin{
\keepn
２．Cetaの設定
\par\pard


（１）Cetaを起動します。メニューの「オプション」->「Cetaの設定」をクリックします。

　「Cetaの設定」ダイアログボックス(以下DLG）が表示されます。「コマンド」メニュータブページを使います。

（２）Borland C++ Compilerを追加します。

　「追加」ボタンをクリックします。
　ファイル選択のダイアログボックスが表示されますので、「C:\\Program Files\\Borland\\bcc55\\bin\\bcc32.exe」を選択し「開く」をクリックします。「実行ファイル名」にbcc32.exeが表示されるはずです。

　「登録名」を「BCC55(for DOS)」にしておきます。これは「コマンド」メニューに表示される文字列です。
　「実行コマンドライン文字列」には「%lfc %lft」とデフォルトで表示されているはずです。
　これらはCetaの備える文字列展開マクロです。実際にコマンドを実行する際、これらのマクロが実行ファイル名や、対象ファイル名に置換されて実行されます。Cetaはロングファイル名やショートファイル名(DOS8.3形式）などのマクロをサポートし、プログラミングを援助します。
　「実行コマンドライン文字列」テキストボックスの上にマウスカーソルを移動し、右クリックしてみてください。Cetaのサポートしているマクロと、その展開内容を示したポップアップメニューが表示されます。

　「環境変数」では入力エリアをクリックし、入力状態にしてから右クリック。表示されたポップアップメニューの「PATH="%WINDIR%";"実行ファイル・・・（ロング）"」をクリックします。
　実行ファイル名から自動的にディレクトリ部分を抜き出し、標準的なPATH設定を挿入します。
　今回はこれだけで「環境変数」の設定はお仕舞いです。

　「エラーメッセージをファイルに出力」チェックボックスをチェックしておきます。
　「ファイル名を " " で囲む」はデフォルトでチェックされています。ここはそのままで大丈夫です。

　{\b 必ず「更新」ボタンをクリックしてください。これをしないと、変更が反映されません。}

（３）ついでにもう少し。

　「追加」ボタンをクリックして、同じくbcc32.exeを選択します。

　「登録名」を「BCC55{\b (for Win)}」にしときます。つまり、Windowsプログラム用の設定を追加します。
　「実行コマンドライン文字列」に、%lfc と %lft の間に「{\b -tW}」を挿入します。-tWの前後に半角空白を忘れないでください。つまり、実行コマンドライン文字列は以下のようになります。

{\b %lfc -tW %lft}

　「環境変数」以下、BCC55(for DOS)と同様です。
　「更新」をクリックします。

　更に。

　「追加」ボタンを押します。ここで、{\b 何でも良いのでとにかく適当な実行ファイルを選択してください。}

　「登録名」を「scratch」にしときます。
　「実行コマンドライン文字列」の「%lfc %lft」を削除してください。その後、右クリックマクロ挿入メニューから{\b 「%lnt」}を選んでください。そして、{\b %lntの直後に「.exe」を付け足します。}つまり、実行コマンドライン文字列は以下のようになります。

{\b %lnt.exe}

　「環境変数の設定」以下、BCC55(for DOS)と同様です。

　「ファイル名を " " で囲む」チェックボックスは{\b チェックを外しておいてください}。

　「更新」をクリックします。

　最後に「Cetaの設定」DLGの「OK」ボタンをクリックします。


　以上でDOSプログラム用のコンパイル、Windowsプログラム用のコンパイル、さらにマクロを使った裏技メニューが登録されました。

（４）C/C++用ファイルタイプの設定

　「Cetaの設定」DLGの「ファイルタイプ」メニュータブページを使います。

　「追加」ボタンをクリックします。
　ファイル選択のダイアログボックスが表示されますので、解凍したCeta一式に含まれるフォルダ「ci_files」から、「…\\ci_files\\c_src.ini」を選択し「開く」をクリックします。「文字色設定ファイル」にc_src.iniが表示されるはずです。

　「登録名」を「C/C++ソースコード」にしておきます。これはメニューの「オプション」->「Cetaの設定」->｢文字色設定｣メニューや、Cetaでファイルを開いたり、新規作成するときの「ファイルタイプの選択」DLGに表示される文字列です。

　｢対応拡張子」の欄には、「*.c;*.cpp」と入力しておきます。この辺の詳細については、本チュートリアルの「５．文字色の設定を変えてみる」などを参照してみてください。

　「更新」をクリックします。
　
　以上でC/C++ソースコードのファイルタイプが登録されました。
　

　では、次は設定が間違っていないか実際のプログラムを使って動作確認です。

}end

//Page//
HLP000044
「Hello, World!」
「Hello, World!」
False
0


44
begin{
\keepn
３．「Hello, World!」
\par\pard



（１）と言うわけで。とりあえずプログラミングをしてみませう。

　「ファイル」->「テンプレートから新規作成」->「dos_hello.c」をクリック。「テンプレートを使用して新規作成するファイル名の入力」ダイアログボックスが表示されます。この機能は、ceta.iniに設定されているテンプレートディレクトリ内のファイルをコピーして、新しくファイルを編集する機能です。文字通りテンプレートファイルを利用する機能です。

　今回はそのまま、「dos_hello.c」と入力して「開く」をクリックします。
　「ファイルタイプの選択」ではC言語用の設定を使います。

　ソースファイルが開きます。以下のソースコードが書かれていることを確認してください。

\pard\box\brdrs #include <stdio.h>\line
void main(void)\line
\{\line
	printf("Hello, World!\\n");\line
	getchar();\line
\}\par\pard

　さて、ここでうっかり文字を入力して壊したくはありません。そうしたときは、「編集」->「書き込み禁止」を選択してください(Ctrl + Q）。編集ウインドウの下部、ステータスバーの「キー操作モード云々」の左に注目してください。
　Ctrl + Qを押すたびに「RW」「RO」の間を切り替わるはずです。
　「RW」の時は「Read and Write」、つまり書き込み可能です。
　「RO」の時は「Read Only」、つまり読み込みのみです。
　ファイル内容を一時的に保護したいときに上の機能を利用できます。ここではとりあえずROにして、ソースコードを壊さないようにしておきましょう。（ファイルシステム上のReadOnly属性とは関係ありません）

　この状態でとりあえず上書き保存しておきます。

　では、コンパイルしてみましょう。「コマンド」メニューに先ほど登録した「BCC55 for DOS」をクリックします。

　「コマンド実行」ダイアログボックスが表示されます。「対象ファイル」に編集中の「dos_hello.c」がフォルダ名も含めて指定されているはずです。

　「コマンド実行」ダイアログボックスで、その場限りで設定を変更してプログラムを起動できます。
　コンパイルオプションやリンクファイルの指定などの事態を想定しています。
　また、環境変数の設定に絡むプログラムを考慮して環境変数の設定も変更できます。
　コンパイラなどが出力するメッセージを保存するファイルは「出力ファイル名：」に表示されているファイルです。

　{\b\cf6 ｢コマンド実行｣によってWindowsプログラムを実行するときは「エラーメッセージをファイルに出力」のチェックを必ず外してください。プログラムに依りますが、ハングアップする可能性があります。}
　
　一通り確認がすんだら「実行」ボタンをクリックします。

　bcc32.exeというキャプション（タイトル）のDOSウインドウが開いて、何も表示されませんがすぐにilink32.exeなどとキャプションが変わります。
　「エラーメッセージ表示エリア」に

\pard\box\brdrs Borland C++ 5.5.1 for Win32 Copyright (c) 1993, 2000 Borland\line
C:\\（dos_hello.cのフルパス表示）:\line
Turbo Incremental Link 5.00 Copyright (c) 1997, 2000 Borland\line\par\pard

　と表示されていれば実行ファイルは生成されています。試しにエクスプローラからdos_hello.cを保存したディレクトリを表示してみてください。dos_hello.exeが生成されていれば問題ありません。

　では、「コマンド」メニューから「scratch」を選択してください。「対象ファイル」にdos_hello.cが表示されていることを確認したら、「実行」をクリックします。
　DOSウインドウが開き、「Hello, World!」と表示されて停止します。リターンキーか何かを押せばプログラムは終了します。

　もしも上記のようなメッセージがでなければ、次の点を確認して下さい。

１．編集ファイルは保存されていますか？

２．環境変数に設定したPATHはきちんとbcc32.exeのあるフォルダを指していますか？

３．PATHに指定したディレクトリは、""（ダブルクォーテーション）で囲まれていますか？
　例えば次のような指定では失敗します。
　PATH=C:\\Program Files\\Borland\\bcc55\\Bin
　（この事に関する詳細は本ヘルプの「技術情報」を漁ってみて下さい。）

４．結果を出力するファイルに特殊なプロパティが指定されていませんか？ReadOnly属性などがチェックされていれば、外してみて下さい。


　ここで、コンパイラなど、何かファイルを生成するプログラムを起動した場合、その生成ファイルはどこにできるかをお話しします。
　{\b 生成元、要するに編集中のファイル。「対象ファイル」と同じフォルダ内にできます。}

　だから。エクスプローラは常に傍らに開いておくと便利です。
　DOSプログラムはこれでおしまいです。

　余力があれば・・・次に、

（３）プログラミングしましょう（「Hello, World!」{\b  for Windows版}）

　動作確認だけなので、メッセージボックスをだしておしまいにしましょう。
　「テンプレートから新規作成」で、「win_hello.c」を選択し、適当なファイル名で保存します。

\pard\box\brdrs #include <windows.h>\line
int WINAPI WinMain(HINSTANCE hThisInst,HINSTANCE hPrevInst,LPSTR lpszArgs,int nWinMode)\line
\{\line
	MessageBox(HWND_DESKTOP,"Hello, World!","Test Message",MB_OK);\line
	return 0;\line
\}\line\par\pard

　先ほど登録しておいた「コマンド」->「BCC55 for Win」を実行します。

　コンパイルできれば、早速「scratch」を利用して実行してみましょう。メッセージボックスが出て、「OK」ボタンをクリックすれば終了します。
　これでWindows用のオプションが正しく機能していることが確認できました。

}end

//Page//
HLP000053
Internet Explorerを登録してみる
Internet Explorerを登録してみる
False
0


53
begin{
\keepn
４．Internet Explorerを登録してみる
\par\pard


（１）面白い用例で、コマンドメニューにInternetExplorerを登録してみましょう。
　HTMLを編集しているときとか直ぐ確認できて、便利（な感じを受けるときもある）です。

　「オプション」->「Cetaの設定」->「コマンド」メニュータブページ
　「追加」で、プログラム実行ファイル本体は
　C:\\Program Files\\Internet Explorer\\Iexplore.exe
　です。

　「登録名」はIEとでもしておきましょう。
　「実行コマンドライン文字列」はデフォルトの「%lfc %lft」で大丈夫です。
　「環境変数」は何も指定しなくて大丈夫です。
　「エラーメッセージをファイルに出力」チェックボックスは{\cf6 必ずチェックを外して}おいてください。
　「更新」をクリックしたのち「OK」ボタンをクリックしてＤＬＧを閉じます。

{\b 　「Cetaの設定」の「OK」ボタンをクリックすると全ての設定が保存され、メニューが再構築されます。
　「キャンセル」ボタンをクリックすると、文字色の設定以外、全ての変更がキャンセルされます。}

　早速、新しくHTMLファイルを作ってコマンドメニューに登録されたIEを使ってみましょう。

　動かないときは、実行ファイル本体の指定が間違っていないか確認して下さい。
　IEは本体の指定さえ間違ってなければ、余計な設定無しに（あると却って動かないかも）起動するはずです。


}end

//Page//
HLP000054
文字色の設定を変えてみる
文字色の設定を変えてみる
False
0


54
begin{
\keepn
５．文字色の設定を変えてみる
\par\pard



（１）Cetaの特徴が、各ファイルタイプに応じた文字の色分けを柔軟に設定できる事です。
　というわけで、試しにあたらしくアセンブラ用の、極単純な文字色設定を追加してみましょう。
{\b ＊＊＊Tips＊＊＊}
　ちなみに、アセンブラを出力するbcc32.exeのオプションは「-S」です。

　「オプション」->「Cetaの設定」->「ファイルタイプ」タブページ
　「追加」をクリックします。ファイル選択のダイアログボックスが表示されます。ここで、{\b 存在しないファイル名}を入力し、「開く」をクリックします。今回は「asm_src.ini」とでもしておきましょう。
{\b ＊＊＊Tips＊＊＊}
　ファイルタイプタブページで追加をクリックした際、ファイル選択のダイアログボックスが表示されます。このとき、このダイアログボックス内でファイルの削除やコピーが行えることをご存じでしょうか？これを利用して、既成の文字色設定ファイルをその場でコピー、別名に変更し、そちらを選択することにより、既にカスタマイズされている既成の文字色設定をそのまま流用することが可能です。
　今回も、C言語用の文字色設定ファイルをコピーした後asm_src.iniと名前を変更し、そちらを選択すれば、わずかな変更でアセンブラ用の気の利いた文字色設定ファイルが入手できます。

　「ファイルタイプ」には「アセンブラソースコード」とでも入力します。
　「対応拡張子」には「*.s;*.asm」と入力しておきます。

　「更新」をクリックして設定を有効にした後、「OK」ボタンをクリックしてＤＬＧを閉じます。

　「オプション」->「文字色設定」の下に、新しく「アセンブラソースコード」が追加されているはずです。クリックしてください。「"使用する文字色設定ファイルのフルパス名"の文字色設定」というキャプションのダイアログボックスが表示されるはずです。

　まだ存在しない設定ファイルを読み込んだとき、文字色は白の背景に黒字というデフォルト値が採用されます。
　ここから、新しく設定を施していきます。
　設定ダイアログボックス中の表示は殆ど英語ですが、何を意味しているのかはそれぞれのタブページでF1キーを押してみて下さい。対応するタブページの設定内容を日本語で一対一で説明したヘルプが開くはずです。

　ここで、適当に文字色を変更してみて下さい。

　「設定ファイルへ書き出し」すると、asm_src.iniが上書き保存されます。

　Cetaではこのようにして拡張子と文字色設定の対応付け、そして文字色設定を柔軟に変更できます。

}end

//Page//
HLP000055
ヘルプを登録してみる
ヘルプを登録してみる
False
0


55
begin{
\keepn
６．ヘルプを登録してみる
\par\pard


（１）Cetaを起動します。「オプション」->「Cetaの設定」をクリックします。

　「ヘルプ」メニュータブページに、現在登録されているヘルプの一覧が表示されます。
　{\b Cetaそれ自身のヘルプが登録されていませんが、それらは固定されておりここには表示されません。}安心して登録、削除をして下さい。

　とりあえず、Borland C++ Compilerのツールヘルプを登録してみましょう。

　「追加」ボタンをクリックすると、ファイル選択のダイアログボックスが表示されます。Borland C++ Compilerのツールヘルプは、BCCをインストールしたディレクトリのHelp\\bcb5tool.hlpにありますので、選択して「開く」をクリックします。「ヘルプファイル」に自動的にヘルプファイルのフルパスが挿入されます。
　「登録名」は「BCBツールヘルプ」とでもしておきましょう。

（余談ですがtool.hlpはBCCのコマンドラインオプションが記載されてヘルプファイルです。標準関数やVCL、文法のヘルプファイルではありません。）

　「更新」をクリックして設定を有効にするのを忘れないでください。

　「OK」をクリックしてダイアログボックスを閉じれば、「ヘルプ」に新たに「BCBツールヘルプ」が追加され、クリックするとtool.hlpが表示されるはずです。

　このようにCetaではヘルプファイルも自由に登録することができます。

}end

//Page//
HLP000004
java コンパイラを登録してみる
java
False
0


4
begin{
\keepn
７．java コンパイラを登録してみる。
\par\pard


　というわけで、Javaのコンパイラと実行環境を構築してみましょう。
　といっても学習環境程度のものですが。

（１）Java SDKのインストールとCetaへのコンパイラの登録

　とりあえずここからJava2SDK（よーするにJava2の開発キットね。)をダウンロードしました。
{\uldb Java 2 SDK Standard Edition Version 1.4 ：http://java.sun.com/j2se/1.4/ja/}{\v !ExecFile("http://java.sun.com/j2se/1.4/ja/")}
　JRE(Java Runtime Edition)ではなく、必ずSDK(Software Development Kit)の方をダウンロードしてください。

　ドキュメントも合わせると数十MBと大変に重いです。雑誌か本に付いてるのがあればそれを使うに越したことは無いでしょう。

　とりあえずj2sdk-1_4_＊＊-windows-i586.exeとか言うのをダブルクリックして（＊＊という部分には細かいバージョンナンバーが入ります）インストールプログラムを「はい、はい」と進んでいくと。
C:\\j2sdk1.4.＊＊
　とかゆうディレクトリにいろいろ展開されました。中を見ると、bin\\javaとかbin\\javacとかそれっぽいのがいろいろ入っています。
　bin\\javac.exe
　これがJavaのコンパイラですね。
　bin\\java.exe
　これが何でも、Javaの実行環境とか言うのらしいです。

　私も、今回はJavaを勉強しようと思ったわけでもなく、CetaでJavaが扱えるかを実験したわけで私自身はJavaに関する知識は殆どありません。
　文法がCPPに酷似。完全にオブジェクト指向。.classというのがjavacで生成されるクラスファイルで、これをjava.exeに渡すととりあえず実行してくれるらしい。
　この程度の知識です。
　ただjavac.exeと来たあたりで環境変数にぴーんとくるモノがあります。
「要はPATH通せばいいわけね。」
　とユー訳でCetaを起動しまして、設定に行きます。

　登録名はJava2とでもしときます。
　実行ファイルは参照ボタンでさくっと「bin\\javac.exe」を指定しまして。
　実行コマンドライン文字列はデフォルトで大丈夫です。
　環境変数は、右クリックで定型PATH、%WINDIR% + ディレクトリ部分のあれを使い回して大丈夫です。
　エラーメッセージをファイルに出力はチェックします。
　""囲みも有効にしておきましょう。

　以上の設定で追加、OKで設定ファイルに書き込みます。
　早速「コマンド」メニューを開けてみて、「Java2」の文字があるのを確認したらクリック。設定がきちんと保存されているか確かめましょう。

　あとはソースコードを用意してコンパイルするだけです。以下のソースコードが「hello.java」という名でテンプレートディレクトリにありますので、使い回してください。
　あと、Javaではクラス名と、それを収めたファイル名が一致している必要があるみたいです。

\pard\box\brdrs public class hello {\line
	public static void main (String[] args) {\line
		System.out.println("Hello world");\line
		try \{\line
			System.in.read();\line
		\} catch (Exception e) \{\line
		\}\line
	\}\line
\}\line\par\pard

　System.out.println()で"Hello world"を表示して、その後read()でキー入力待ち。
　何かキーが押されたら終了。と言った内容です。
　んで、保存したら早速「Java2」をコマンドメニューから選びませう。
　速攻で「実行」にいっちゃって大丈夫でした。

　ところが・・・コンパイルメッセージ表示エリアに何も表示されません！！

　いえ、どうもDOS窓からも確認したところ、javac.exeは{\b コンパイルに成功すると何も表示しない}ようでした。エラーがあるときだけ何か出力するわけ。
　結局ちゃんとhello.classが生成されてました。


（２）Javaの実行環境の登録

　生成される.classファイルを「実行」するためにはjava.exeにクラスファイルを渡す必要があります。java.exeはクラスファイルの一種のインタープリタというか、解析プログラムみたいなものでしょうか。
　とにかく設定はこんな感じにしました。

　登録名はJavaBinとでもしときます。
　実行ファイルはさくっと「bin\\java.exe」を指定しまして。
　「実行コマンドライン文字列」ですが、以下のように指示します。

{\b %lfc -classpath %ldt %lot}

　まず、最初の「%lfc」マクロは実行ファイルフルパスに展開されます。つまり、java.exeが入ります。
　次の「-classpath %ldt」ですが、ここでＪａｖａ特有の規則が関係してきます。
　Javaでは、{\b ディレクトリ構造をそのままクラスの派生構造とみなす仕組み}があります。
　そのため、クラスファイル(*.class)をフルパスで指定してしまうと、間違ったクラス構造を指示してしまうことになるわけです。
　そこで、「ここがクラスファイルのあるディレクトリですよ。」と指示するのが「-classpath」オプションです。
　「%ldt」はターゲットファイル名のディレクトリ部分に展開されるので、今回のように指示すれば正しくクラスファイルのあるディレクトリを指示することができます。（出力ディレクトリを別の場所にした場合は話が違ってくるでしょうが、まあ学習段階ではそこまで気を回す必要はないと思います）
　次に肝心のクラスファイルの指定ですが、{\b java.exeではクラス名をそのまま指示}します。
　つまり、今回の例なら「hello.class」ではなく単に「hello」と指定するわけです。
　そうしたマクロ展開をしてくれるのが「%lot」マクロです。これはディレクトリ部分も、拡張子部分も除いた文字列に展開してくれます。

　環境変数はコンパイラと同様に%WINDIR%と実行ファイル名のディレクトリ部分（ロング）の組み合わせだけです。
　エラーメッセージをファイルに出力は・・・汎用性を考えてチェックを外しておきます。
　ファイル名を " " で囲むチェックボックスは、チェックをつけておいてください。

　以上の設定により、今回の例では「C:\\My Documents\\Java\\hello.java」をコンパイルした後、そのまま「JavaBin」を選ぶだけで、

%lfc -classpath %ldt %lot　マクロが、

"***\\java.exe" -classpath "C:\\My Documents\\Java" "hello"

　と展開、実行されます。DOSウインドウが表示され、文字列が現れれば成功です。


　実は、Ceta Ver 2.6で実装された各種コマンドライン展開マクロはそのほとんどがこうした、Javaや次に示すFortranのDOS8.3形式制限に対応するために実装されたものです。

　Javaではこうしたコマンドラインによるクラスパスの指定以外にも、コンパイラや実行時に細かいオプションを指定する、C言語で言うMakefileみたいなものが利用できるようです。作者の風晶自身はJavaを勉強しているわけではないのでよく分かりませんが、本格的にプログラミングを始めるのであればCetaよりかは、Javaに特化したエディタを利用された方が良いでしょう。

}end

//Page//
HLP000012
FORTRN 77 を登録してみる
FORTRAN 77
False
0


12
begin{
\keepn
８．FORTRAN 77 を登録してみる。
\par\pard


　数値計算の世界などではまだまだ現役のFORTRAN。今回は、Salfordより無償公開されているSalford FTN77 Personal Edition CompilerというFortranコンパイラを登録してみます。

（１） Salford Fortran 77 のインストール

　{\uldb http://www.salford.co.uk/compilers/ftn77pe/index.shtml}{\v !ExecFile("http://www.salford.co.uk/compilers/ftn77pe/index.shtml")} 
　より、Salford FTN77 Personal Edition Compiler としてダウンロードすることが可能です。
　ftn77pe.exeという実行ファイルがダウンロードできれば、ダブルクリックするとセットアッププログラムが起動します。インストールするディレクトリを聞いてきます。ここでは「C:\\Program Files\\salford」を指定したものとして話を進めます。
　セットアッププログラムは「スタート」メニューの「プログラム」に、Salfordのヘルプドキュメントへのリンクメニューを追加します。また、環境変数PATHにインストールディレクトリのショートファイル名（今回はC:\\Program Files\\salfordなので、C:\\PROGRA~1\\salford）を追加します。
　PATHに追加する必要がなぜ生じるかというと、Fortran 77 コンパイラftn77.exeでコンパイル、及びslink.exeでリンクして生成された実行ファイルは、Salford Fortran 77 の提供するDLLを使用して動作するため、そのDLLが格納されたフォルダ（つまりSalford Fortran 77 のインストールディレクトリ）をPATHに追加しておき、DLLを探せるようにしておく必要があるからです。
　もし手動でPATHを変更してしまった場合など、上記に関して十分注意してください。
　環境変数をいじくるため、セットアッププログラムが終了すると再起動を要求されます。システムを再起動すればインストールは終了です。

（２） Cetaへの登録、コンパイルの確認

　テンプレートに「hello.for」というファイルがあります。これがFortran版「Hello, World」プログラムですので、これを使ってコンパイル動作の確認を行います。中身はこんなソースコードです。

\pard\box\brdrs C	program test\line
	write(*,*) 'test'\line
	end\line
\line\par\pard

　コンソール画面に「test」とのみ表示するだけのプログラムです。

　それではCetaの設定ＤＬＧの「コマンド」メニュータブを開いて、「追加」ボタンをクリックします。
　FortranコンパイラはFTN77のインストールディレクトリの中の「ftn77.exe」です。
　「登録名」は「SFTN77」とでもしておきましょう。
　「実行コマンドライン文字列」にポイントです。デフォルトを削除して、次のマクロにしてください。

{\b %sc /link %st}

　とします。Salford Fortran 77 はロングファイル名、及びダブルクォーテーション囲みを一切認識しません。
　そのため、コマンドラインマクロは全てショート形式を用います。
　「%sc」マクロは実行ファイル名のショートファイル名での、ディレクトリ部分を除いたものです。
　「/link」オプションはftn77.exeで実行ファイルの生成まで行うためのオプションです。
　「%st」マクロは対象ファイル名のショートファイル名での、ディレクトリ部分を除いたものです。

　「環境変数」の設定では、PATH=ウインドウズディレクトリ＋ショートファイル形式を使ってください。
　エラーメッセージのファイル出力はチェックをつけておきます。
　「ファイル名を " " で囲む」は{\b チェックを必ず外して}ください。

　以上のような設定で「更新」「OK」したのち、hello.forを開いた状態で「コマンド」メニューから「SFTN77」を選択します。で、実行してみます。

\pard\box\brdrs [Salford FTN77/Win32 v4.03, Copyright (c) Salford Software Ltd. 1988-1998]\line
    Licensed to: FTN77 Personal Edition\line
    Department: Non-commercial use only\line
    NO ERRORS  [<MAIN@>FTN77 Ver 4.03]\line
Creating executable: hello.exe\line
\line\par\pard

　のように下部のエラーメッセージ表示エリアに示されれば、成功です。hello.exeが生成されていることを確認してください。

　Fortran インストールディレクトリにPATHが通った状態でDOSプロンプトを立ち上げ、hello.exeを実行してみてください。Hello, Worldと表示されれば成功です。

　このようにCetaでは環境変数の指定やコマンドラインマクロの組み合わせにより、幅広いプログラム、コンパイラに編集中のファイルを渡すことができます。或いは、編集ファイルの展開マクロをあえて何も入れず、実行プログラムだけが展開されるようにしておき、適当なオプションを渡すことによって、フリーのWebサーバーであるApacheの制御コマンドをメニューに登録することも可能です。

　では、続いてCetaの唯一の泣き所である文字コード変換を、外部プログラムQKCを使って解消してみましょう。

}end

//Page//
HLP000013
QKCを登録してみる
文字コード
False
0


13
begin{
\keepn
９．QKCを登録して、文字コード変換にこき使ってみる。
\par\pard


（１）QKCの入手
　まず、文字コード変換ソフトに関してですが。QKC以外にも、UNIX系列で非常によく使われている NKFが存在します。NKFはWindows版のNKF32も存在し、これはこれで使いやすいと思うのですが。ただ、Windowsで使う以上はGUIでも使えればいいな、というわけで、GUIが非常に使いやすく整理されているのがQKCだったわけです。使っていただければ分かると思うのですが、QKCのGUIは非常にシンプルで、「UNIX、Windows、Macのテキストファイルを変換する」のが非常に簡単に出来るようになっています。
　とりあえず入手先です。
{\uldb http://hp.vector.co.jp/authors/VA000501/}{\v !ExecFile("http://hp.vector.co.jp/authors/VA000501/")}

　さて。QKCは普通はGUIとして使うのですが、気が利いたことにコマンドラインからも実行できるんですよ。というわけで、Cetaではそれを利用して登録してみることにします。
　QKCを入手するとzip圧縮がかかっていますので、適当な解凍ソフトで解凍します。
　んで、出来たフォルダをC:\\Program Filesに突っ込んだ、としておきます。
　（つまりQKCの実行ファイル本体QKCW.EXEはC:\\Program Files\\qkc311\\qkcw.exeに存在します。）
　という過程で以下の手順を説明します。

　QKC単体での使い方は、非常に詳細でわかりやすいヘルプがくっついてきてますし、実行してみればヘルプを見ずとも、大体の使い方は分かってしまうようなGUIです。そーゆー訳でここではQKC単体の使い方は説明しません。まあ、適当なテキストファイルをメモ帳とかで用意して、GUIでちょこちょこ変換して遊んでみてください。


（２）Cetaへの登録
　んじゃあ、肝心のCetaへの登録を解説します。
　まず、QKCの本体実行ファイルqkcw.exeをコマンドライン上で起動するには、/Bオプションを先頭に持ってきます。（コマンドラインオプションの詳細はQKCのヘルプを参照）これによってGUIウインドウを表示させずに、コマンドライン上で変換作業を完了できます。

　今回の登録では、変換に以下のオプションを使いました。
ファイルを上書きする /V 
Shift_JISに変換する /S 
改行コードをWindows用に変換する /M 
euc-jpに変換する /E 
改行コードをUNIX用に変換する /U 

　結局実際の変換の時は以下に示すコマンドが実行されるようにすればいいわけです。
UNIX → Windows qkcw.exe /B /V /M /S [変換するファイル] 
Windows → UNIX qkcw.exe /B /V /U /E [変換するファイル] 

　注意点として、qkcのヘルプにもありますが/Bオプションを必ず先頭に配置してください。
　元のファイルの文字コードに関してはデフォルトで自動判別がされるので、指定する必要はありません（一応元の文字コードを指定するオプションもありますが）。　上記のことをふまえて、いよいよCetaに登録してみましょう。

　まず、Windows → UNIX用を登録します。
　登録名は「QKCW (S to E)」とでもしときます。
　実行ファイルは参照ボタンでさくっと「qkcw.exe」を指定しまして。
　実行コマンドライン文字列は以下のようになります。

{\b %lfc /B /V /U /E %lft}　

　環境変数は・・・うっかり何も指定せずにやってみたらそのまま通ってしまいました。よって特に設定しなくてもちゃんと動きます。
　エラーメッセージの出力チェックは外しておいてください。
　ダブルクォーテーション囲みのチェックはオンで大丈夫です。

　以上の設定で「更新」、「OK」で設定ファイルに書き込みます。

　では早速何か日本語で書かれたテキストファイルを用意してみます。で、「コマンド」メニューから「QKCW (S to E) 」を選択して実行します。
　実行しただけでは編集画面の方では何も変化しません。「ファイル」メニューから「更新」を選択してみます。或いはIE準拠のF5でも同じです。
　すると、なんだか訳の分からない文字列になっていることが分かります。つまり、UNIX標準のEUC-JPに変換されたということです。

　では、今度は逆にUNIX → Windows用を登録して、先ほどEUCに変換したファイルをShift-JISに戻してみます。
　Cetaの設定ＤＬＧを開き、コマンドを追加しましょう。

　登録名は「QKCW (E to S)」とでもしときます。
　実行ファイルは参照ボタンでさくっと「qkcw.exe」を指定しまして。
　実行コマンドライン文字列は以下のようになります。

{\b %lfc /B /V /M /S %lft}　

　環境変数は何も指定しなくて大丈夫でした。
　エラーメッセージの出力チェックは外します。
　ダブルクォーテーション囲みのチェックはオンで大丈夫でした。

　「更新」「OK」でＤＬＧを閉じｊ、早速「QKCW(E to S)」を実行し、F5でリロードしてみます。
　見事に元に戻っているはずです。つまり、SJISに変換されたというわけです。

　まあ、EUC-JPのファイルを読み込み、SJISで表示するわけではないので秀丸やそれなりの機能を備えたエディタほどではありません。しかし、外部プログラムとの組み合わせによっていかようにでもなる、というCetaのおもしろさを感じ取っていただけるとうれしいです。

}end

//Page//
HLP000010
機能リファレンス

False
1


10
begin{

}end

//Page//
HLP000020
用語とか。
用語とか。
False
0


20
begin{
\keepn
用語とか。
\par\pard


機能リファレンスを始めるにあたって、分かりづらい用語とか、Cetaメイン画面の各パーツとかを解説しておきます。

{\b 分かりづらいかもしれない用語をさらに分かりづらく解説してみたり。}

・「コマンド」、「外部コマンド」、「外部実行プログラム」「外部コンパイラ」e.t.c....
→　何の変哲もありません。{\fs36 普通のプログラム}のことを言っています。Cetaでは実行ファイル名を登録しておくことによって、「コマンド」メニューからクリックするだけでそのプログラムを起動できる、{\fs36 ショートカットというかランチャー機能}があります。これにコンパイラとかを登録しておくと、編集中のファイルをコンパイルすることとかできます。

・「外部ヘルプ」
→　上と同様、何の変哲もありません。普通のヘルプです。Cetaではヘルプファイル名を登録しておくことによって、「ヘルプ」メニューからクリックするだけでそのヘルプをみれます。{\fs36 「お気に入り」のヘルプ版}だと考えてください。

・「TEditor」「TEditorEx」
→　Cetaは、ゼロから全部風晶が作ったのではありません。既成のパーツを組み合わせただけです。
　　TEditor, TEditorExは、文字色設定機能を提供してくれるパーツです。検索・置換機能とかも提供してくれています。CetaではTEditor, TEditorExの提供している機能をそのまま流用しているだけの部分もあります。

・「文字色設定」云々
→TEditor, TEditorExの備える(BCB/Delphiユーザーの間では）非常に有名かつ有用な機能です。整数値や予約語、全角文字を判別して、色分け表示してくれます。そうすることによってプログラムソースコードを見やすくしてくれます。
　また行の折り返しや行桁の表示、カーソル、縦列選択機能など、秀丸に匹敵する機能のほとんどを備えており、BCB/Delphiでエディタを作るならTEditor(Ex)を抜きにして考えられないほどです。
　CetaではTEditor(Ex)の備える、特に文字の種類に応じた色分け機能を「文字色設定」と呼びます。
　文字色設定ファイルとくれば、TEditor(Ex)の機能の設定値が書かれたファイルのことだと考えてください。
　くどいなあ。
　とにかく、{\fs36 文字の種類に応じて色分けしてくれる機能}に関連した言葉が「文字色設定」云々です。

{\b Cetaメイン画面について。}

Cetaメイン画面は、メニュー、編集ウインドウ、コンパイルメッセージ表示エリアの３つから構成されています。
メニューや編集ウインドウは一般のアプリケーションと同じです。

コンパイルメッセージ表示エリアは、「エラーメッセージ表示エリア」とか記述したりしてます。
要するに、「何とか表示エリア」ときたら、「ああ、デフォルトで画面下に編集はできませんとか書かれてるあそこのことか。」と考えてください。
その名の通り、コンパイルメッセージが表示される（ことを意図して作られた）ReadOnlyのTMemoコンポーネントをぺろっと貼り付けてあるだけです。


}end

//Page//
HLP000008
各種ダイアログボックス

False
2


8
begin{

}end

//Page//
HLP000007
検索・置換ダイアログボックス
検索・置換ダイアログボックス
False
0


7
begin{
\keepn
「検索」、「置換」ダイアログボックスについて説明します。
\par\pard

「検索」及び「置換」ダイアログボックスではTEditorExの検索・置換オプションまたはTEditorの検索・置換オプションを指定できます。

下に設定できるオプションを示します。
赤色で示したオプションは置換時のみ使用できるオプションです。それ以外は検索・置換共通です。


「検索文字列」：検索する文字列を入力します。「検索バッファ」に保存されていれば予め表示します。

{\cf6 「置換文字列」}：置換後の文字列を入力します。

{\cf6 「全て置換」}：チェックすると・・・

	Editor検索の場合：「置換前に確認する」チェックボックスがチェックされていると、検索にヒットする度に確認のダイアログボックスが表示されます。チェックされていないと確認無しに全て置換します。

	EditorEx検索の場合：検索文字列にヒットした単語を一気に、確認無しに置換します。

「Editor検索」・「EditorEx検索」：どちらかを選択できます。


《 Editor検索オプション 》

「前方検索」：現在位置から下向きに検索するときはチェックして下さい。
「大文字小文字を区別」：チェックされていると大文字と小文字を区別して検索します。
「単語単位での検索」：チェックされていると、空白や記号で区切られた一単語として検索します。
「半角全角の区別をしない」：チェックされていると半角全角の区別をしません。
「改行文字を含む」：チェックされていると、間に改行を挟んでいても検索できます。
「空白を含む」」チェックされていると、間に空白を挟んでいても検索できます。
{\cf6 「置換前に確認する」}：チェックされていると、置換前に確認のダイアログボックスが表示されます。


《 EditorEx検索オプション 》

「大文字小文字を区別」：そのままです。
「正規表現検索」：UNIX上でのgrep、egrep相当、日本語使用可能で正規表現を使用できます。bmonkey氏の「bmRegExp017」コンポーネントを利用します。
「あいまい検索」：「正規表現検索」を利用する際、チェック可能になります。機能未知数。TEditorExコンポーネントにより実装されています。
「単語単位での検索」：空白や記号で区切られた一単語として検索します。

}end

//Page//
HLP000026
コマンド実行ダイアログボックス
コマンド実行ダイアログボックス
False
0


26
begin{
\keepn
「コマンド実行」ダイアログボックスについて説明します。
\par\pard

{\b 実行ファイル名フルパス}：実行ファイル名を指定します。

{\b コマンドライン}：最終的に実行されるコマンドをマクロ文字列を併用して指示します。右クリックで表示されるメニューからマクロ文字列を挿入することができます。これの利用方法についてはチュートリアルをご覧ください。マクロのリファレンスについては{\uldb 「コマンド」メニュータブページのヘルプ}{\v HLP000022}をご覧ください。

{\b 対象ファイル名}：現在編集中のファイル名がフルパスで入ります。必要に応じて適宜変更して下さい。

{\b 環境変数の設定}：コマンド用の環境変数を設定します（PATH、INCLUDE等）。スペースを含んだロングファイル、ディレクトリ名は""で囲んで指定して下さい。
・・・複数のファイルやディレクトリを設定するには一般に「;」で区切ります。
・・・既に環境変数が設定されている場合は各変数が「|」でつなげられて一行で表示されていますが、異常ではありません。そのまま編集するか、改行しなおして下さい。どちらにせよ、{\b 環境変数はCeta内部で最終的に「|」で一行に連結されます。}

例えば、PATHにc:\\Program Filesとc:\\windows\\system。INCLUDEにc:\\compiler\\includeを指定するには

PATH="c:\\Program Files";"c:\\windows\\system"
INCLUDE="c:\\compiler\\include"

と入力します。これは最終的にCeta内部で「|」により一行に連結されて、

PATH="c:\\Program Files";"c:\\windows\\system"|INCLUDE="c:\\compiler\\include"

として設定ファイルに書き込まれます。異常ではありません。

右クリックメニューをお試しください。PATH設定にとくに便利な挿入機能を提供しています。
また、Windowsディレクトリも%WINDIR%マクロを使っていますので Win9x 系と WinNT 系で同じ設定が利用できます。

{\b エラーメッセージをファイルに出力}：チェックするとDOSプログラムの場合、標準出力、標準エラー出力がCeta起動ディレクトリ内のcmderr.txtにリダイレクト、保存されます。その後メインウインドウのコンパイルメッセージ表示エリアにcmderr.txtの内容が表示されます。{\cf6 WindowsGUIアプリケーションの場合はハングアップしてしまう可能性があるので、必ずチェックを外して下さい。}

{\b ファイル名を " " で囲む}：これをチェックすると、マクロ文字列が展開される際に""（ダブルクォーテーション）で囲まれます。
　一般に、Windows 98以降、32bitのプログラムは""で囲まれた実行ファイル名や引数を認識します。またロングファイル名でコマンドラインオプションを指示する際などは必須なので、デフォルトでチェックが入った状態にしてあります。
　しかしまれに古いプログラムなどで""を認識せず、全てDOS8.3形式ファイル名で指示する必要がある場合もあります。Salford FortranやLSI C-86 などがこれにあたります。
　そのようなとき、マクロ文字列を全てショートタイプにし、なおかつこのチェックボックスを外すことにより正常に実行できる{\b 可能性が高まります}。保証はしません。
}end

//Page//
HLP000023
Cetaの設定
Cetaの設定
False
0


23
begin{
\keepn
「Cetaの設定」ダイアログボックスについて説明します。
\par\pard

「Cetaの設定」ダイアログボックスは三つのタブページから成り立っています。

{\uldb 《ファイルタイプ》}{\v HLP000021}タブページ
・・・拡張子と文字色設定の関連づけを行います。個々の文字色設定は「オプション」「文字色設定」から選択してください。

{\uldb 《「コマンド」メニュー》}{\v HLP000022}タブページ
・・・「コマンド」メニューを編集します。外部プログラム（コンパイラなど）の登録、環境変数の設定、メニュー上での位置の入れ替えなどを行います。

{\uldb 《「ヘルプ」メニュー》}{\v HLP000009}タブページ
・・・「ヘルプ」メニューを編集します。

上の三つのタブページですが。
{\fs36\cf6 設定を変更したら「更新」をクリックするのを忘れないでください。また、削除の際に確認用のメッセージ等は表示されません。直ちに削除されますので、注意して下さい。}

《その他》タブページ
・・・テンプレートディレクトリの変更とか、「最近開いたファイル」履歴のクリアとか、履歴保持数の最大値等を変更できます。あとバージョン情報の表示です。

「OK」ボタン
・・・設定の変更を保存し、{\b ダイアログボックスを閉じます。}変更は直ちに反映されます。

「適用」ボタン
・・・設定の変更を保存しますが、{\b ダイアログボックスは閉じません。}変更は直ちに反映されます。

「キャンセル」ボタン
・・・設定の変更を破棄します。

「ヘルプ」ボタン
・・・このヘルプを表示します。

}end

//Page//
HLP000021
「ファイルタイプ」タブページ
ファイルタイプ
False
0


21
begin{
\keepn
「ファイルタイプ」タブページについて説明します。
\par\pard

{\b ファイルタイプ}：ファイルを開くときに表示される、「ファイルタイプの選択」ダイアログボックスで一覧表示されます。「Cソースファイル」「テキストファイル」など、対応する拡張子の分かり易い説明を入れていただけると幸いです。

{\b 文字色設定ファイル}：文字色設定が記述された*.iniファイルを指定します。右クリックメニューの「参照」を選ぶと、ファイル選択ダイアログボックスが表示されます。

{\b ＊＊＊Tips＊＊＊}
　新規に文字色設定ファイルを作るときは、ファイル選択ダイアログボックスの「ファイル名」のところに、まだ存在しないファイル名を入力して「開く」をクリックしてください。その段階では作成されませんが、「OK」をクリックしてダイアログを閉じた後、「オプション」「文字色設定」サブメニュー中に新しく追加されたファイルタイプをクリックします。
　その時、メモ帳を想定したデフォルト設定値で、自動的に設定ファイルが生成されます。

{\b 対応拡張子}：対応する拡張子を指定します。
アスタリスク（*）ピリオド(.)拡張子の順で設定します。複数対応させるときはセミコロン（;）でつなげます。
例：
・.txtの一つだけを対応させる：*.txt
・.txtと.ini、.docを対応させる：*.txt;*.ini;*.doc

}end

//Page//
HLP000022
「コマンド」メニュータブページ
「コマンド」メニュータブページ
False
0


22
begin{
\keepn
「コマンド」メニュータブページについて説明します。
\par\pard


{\b 登録名}：「コマンド」メニューに表示される文字列を設定します。半角記号(+,-等）は使えません。

{\b 実行ファイル名}：実行ファイル名を指定します。右クリックで表示される「参照」メニューをクリックすると、ファイル選択ダイアログボックスが表示されます。

{\b 実行コマンドライン文字列}：最終的に実行されるコマンドをマクロ文字列を併用して指示します。右クリックで表示されるメニューからマクロ文字列を挿入することができます。
　これの利用方法についてはチュートリアルをご覧ください。ここでは、どのマクロがどう展開されるかのリファレンスにとどめます。

１．実行ファイル名展開マクロ（例：C:\\Program Files\\Bcc32\\bin\\bcc32.exe)
マクロ文字列   ：展開例
%lfc               ：C:\\Program Files\\Bcc32\\bin\\bcc32.exe (ロングファイル名そのまま。)
%sfc              ：C:\\Progra~1\\Bcc32\\bin\\bcc32.exe (フルパスだけどDOS8.3のショートファイル名に。）
%lc                ：bcc32.exe （ディレクトリ指定が消える。）
%sc               ：bcc32.exe （ディレクトリ指定が消えて、DOS8.3のショートファイル名に。）

２．ターゲットファイル名展開マクロ（例：C:\\My Documents\\Test_Program.cpp）
マクロ文字列   ：展開例
%lft                ：C:\\My Documents\\Test_Program.cpp (ロングファイル名そのまま。)
%sft               ：C:\\My~Doc~1\\Test_P~1.cpp (フルパスだけどDOS8.3のショートファイル名に。）
%lt                 ：Test_Program.cpp （ディレクトリ指定が消える。）
%st                ：Test_P~1.cpp （ディレクトリ指定が消えて、DOS8.3のショートファイル名に。）

３．ターゲットファイル名関連特殊展開マクロ（例：C:\\My Documents\\Test_Program.cpp）
マクロ文字列   ：展開例
%ldt               ：C:\\My Documents （ディレクトリ部分だけロングファイル名で抜き出し。）
%lnt               ：C:\\My Documents\\Test_Program (ピリオド＋拡張子部分を除いた。）


{\b 環境変数の設定}：コマンド用の環境変数を設定します（PATH、INCLUDE等）。スペースを含んだロングファイル、ディレクトリ名は""で囲んで指定して下さい。
・・・複数のファイルやディレクトリを設定するには一般に「;」で区切ります。
・・・既に環境変数が設定されている場合は各変数が「|」でつなげられて一行で表示されていますが、異常ではありません。そのまま編集するか、改行しなおして下さい。どちらにせよ、{\b 環境変数はCeta内部で最終的に「|」で一行に連結されます。}

例えば、PATHにc:\\Program Filesとc:\\windows\\system。INCLUDEにc:\\compiler\\includeを指定するには

PATH="c:\\Program Files";"c:\\windows\\system"
INCLUDE="c:\\compiler\\include"

と入力します。これは最終的にCeta内部で「|」により一行に連結されて、

PATH="c:\\Program Files";"c:\\windows\\system"|INCLUDE="c:\\compiler\\include"

として設定ファイルに書き込まれます。異常ではありません。

右クリックメニューをお試しください。PATH設定にとくに便利な挿入機能を提供しています。
また、Windowsディレクトリも%WINDIR%マクロを使っていますので Win9x 系と WinNT 系で同じ設定が利用できます。

{\b エラーメッセージをファイルに出力}：チェックするとDOSプログラムの場合、標準出力、標準エラー出力がCeta起動ディレクトリ内のcmderr.txtにリダイレクト、保存されます。その後メインウインドウのコンパイルメッセージ表示エリアにcmderr.txtの内容が表示されます。{\cf6 WindowsGUIアプリケーションの場合はハングアップしてしまう可能性があるので、必ずチェックを外して下さい。}


{\b ファイル名を " " で囲む}：これをチェックすると、マクロ文字列が展開される際に""（ダブルクォーテーション）で囲まれます。
　一般に、Windows 98以降、32bitのプログラムは""で囲まれた実行ファイル名や引数を認識します。またロングファイル名でコマンドラインオプションを指示する際などは必須なので、デフォルトでチェックが入った状態にしてあります。
　しかしまれに古いプログラムなどで""を認識せず、全てDOS8.3形式ファイル名で指示する必要がある場合もあります。Salford FortranやLSI C-86 などがこれにあたります。
　そのようなとき、マクロ文字列を全てショートタイプにし、なおかつこのチェックボックスを外すことにより正常に実行できる{\b 可能性が高まります}。保証はしません。


　マクロ展開文字列の特殊な二つ。%ldtと%lntは使い方によってはCetaを恐ろしく便利にしてくれます。
　また、%lfcなど実行ファイル関連のマクロは無くても良いんですよ。実は。
　無かったら単に実行ファイル名が最終的なコマンドラインに含まれないだけです。
　そこで。編集ファイル名だけが展開されるようにします。それも、%lntで。では、その直後に「.exe」を付け足すと・・・。
{\fs36\cf6 %lnt.exeマクロ}（例：C:\\hoge\\foo.cpp)
展開後：C:\\hoge\\foo.exe

　或いは・・・
{\fs36\cf6 %lnt.classマクロ}（例：C:\\hoge\\foo.java)
展開後：C:\\hoge\\foo.class
}end

//Page//
HLP000009
「ヘルプ」メニュータブページ
「ヘルプ」メニュータブページ
False
0


9
begin{
\keepn
「ヘルプ」メニュータブページについて説明します。
\par\pard


{\b 登録名}：「ヘルプ」メニューに表示される文字列を設定します。半角記号(+,-等）は使えません。

{\b ＊＊＊Tips＊＊＊
}　登録名の中に、＆に続いてアルファベットを指定すると、メニュー上でショートカットキーになります。
　例えば「ほげ（＆H)」とすると、メニュー上ではHの下に下線が引かれ、Hキーを押すとクリックしたことになります。
　＆に続くアルファベットは大文字小文字区別無しです。重複しないように注意してください。

{\b ヘルプファイル}：ヘルプファイルのフルパス名を指定します。*.hlpと*.chmを選択できます。右クリックで表示される「参照」メニューをクリックすると、ファイル選択ダイアログボックスが表示されます。
}end

//Page//
HLP000019
文字色設定

False
2


19
begin{

}end

//Page//
HLP000024
文字色設定の概要
文字色設定の概要
False
0


24
begin{
\keepn
「文字色設定（ファイル名）の設定」ダイアログボックスについて説明します。
\par\pard

Cetaの文字色設定は、本田勝彦氏の「TEditor」を拡張したKm氏の「TEditorEx」コンポーネントを用いて実現しています。文字色設定ダイアログボックスはTEditor、TEditorExコンポーネントの各種設定へのフルアクセスを提供しています。それによりキーワード（半角全角、文字列、数字、16進数、Url、Mail、タブ文字、半角・全角空白）、予約語、囲み文字等をユーザーご自身で設定できるようになりました。

{\uldb 「Cetaの設定」}{\v HLP000023}ダイアログボックスの{\uldb 「ファイルタイプ」}{\v HLP000021}タブページで、選択されている拡張子に対応付けされている文字色設定ファイルを読み込みます。タイトルバーの「（ファイル名）」部分に現在設定中の文字色設定ファイル名が表示されます。

設定は以下のセクション（タブページ）に分類されています。

タブページ名
・・・そのページで設定できる項目の概要説明

{\uldb Font}{\v HLP000045}
・・・使用するフォント、サイズ。水平・垂直スクロールバーの表示。
{\uldb Caret}{\v HLP000046}
・・・カーソル形状、タブインデント、マウスカーソル形状、ドラッグ操作。
{\uldb View Marks}{\v HLP000047}
・・・文字の色とスタイルの設定。改行記号の設定。
{\uldb Leftbar Ruler Margin}{\v HLP000048}
・・・行、桁インジケータ、余白の設定。
{\uldb Brackets}{\v HLP000049}
・・・囲み文字（/* */,< >等)の色、スタイル設定。
{\uldb ReserveWordList}{\v HLP000050}
・・・予約語の設定
{\uldb WordWrap}{\v HLP000051}
・・・文字の折り返しの設定。

設定ファイルへ書き出し：設定をファイルへ書き出します。

いくら自由度の高い文字色設定機能があるとはいえ、やはり制限があります。対応させたい言語によってはその制限がどうしようもない壁になることもあるでしょう。
作者がC, C++, rc(リソースファイル), HTMLに対応させるのに使ったテクニック、{\uldb 設定のコツ}{\v HLP000039}をぜひ一度お読み下さい。

なお以上のセクションのヘルプには、本田勝彦氏のTEditorヘルプ、Km氏のTEditorExヘルプを参考にした部分が多数あります。
}end

//Page//
HLP000045
Font
Font;フォント
False
0


45
begin{
\keepn
「Font」タブページについて説明します。
\par\pard

Font タブページで設定できる項目について解説します。

{\b\cf11 Font}：使用するフォントを設定します。現在システムにインストールされているフォントの一覧が表示されているので、そこから選択して下さい。なおデフォルトでは可変ピッチフォントは一覧の中に含まれていません。

{\b\cf11 可変ピッチフォントを使う}：チェックすると、可変ピッチフォントも一覧の中に加わり、選択できるようになります。しかしCetaでは可変ピッチフォントを用いた場合、文字が綺麗に表示される保証はありません。なるべく可変ピッチフォントは使用しないで下さい。

{\b\cf11 Size}：フォントサイズを設定します。

{\b\cf11 ScrollBars}：ssNone(スクロールバー無し)、ssHorizontal(水平スクロールバーのみ)、ssVertical(垂直スクロールバーのみ)、ssBoth(水平垂直スクロールバー）の内どれか一つを選択します。

}end

//Page//
HLP000046
Caret
Caret;カーソル;キャレット
False
0


46
begin{
\keepn
「Caret」タブページについて説明します。
\par\pard

{\b\fs28\cf6 Caret（キャレット）とは}：要するにワープロソフトで言うところの「カーソル」のことです。Windows（主にプログラミングのシーン）ではマウスポインタのことを「カーソル」と言い、ワープロソフトなどでの文字挿入位置を示すマークのことを「キャレット」と言います。一般の呼び方と違うので注意が必要です。

ではCaret タブページの機能解説を始めます。

{\b\cf4 FreeCaret}：チェックされていると、行末（改行）を超えてキャレットを移動できます。（ワードラップされた行の行末は超えられません。）

{\b\cf4 FreeRow}：チェックされていると、FreeCaret がチェックされていない場合、↑↓キー押し下げによるキャレット移動時にだけ改行以降もキャレット移動が可能になります（フリーキャレット）。FreeCaret がチェックされていると意味がありません。
FreeCaret ・・・ チェック無し。
FreeRow ・・・ チェック有り。
NextLine ・・・ チェック有り。
も使いやすいそうです。

{\b\cf4 AutoIndent}：チェックされていると、オートタブインデントを行います。TabIndentがチェックされているとTab文字を。TabIndentがチェックされておらず、PrevSpaceIndentがチェックされている場合、現在行の行頭に全角・半角スペースがあれば、同じ数のスペースを次の行頭に挿入します。現在行が空白なら、遡って行頭にスペースがある行を探し、そのスペースを次の行頭に挿入します。挿入されるのは、半角スペース #$20 です。

{\b\cf4 BackSpaceUnIndent}：チェックされていると、BackSpaceキーを押すと１インデント分戻ります。

{\b\cf4 InTab}：チェックされているとタブ文字が展開されている場所の上にキャレットを移動することが出来ます。

{\b\cf4 KeepCaret}：チェックされていると、行を移動してもキャレットが同じ桁位置になるようにします。もし桁位置よりも短い行に来たら、キャレットは行末に行きます。

{\b\cf4 LockScroll}：チェックされていると、スクロール動作にキャレットがついていきます。チェックされていない場合スクロールしてもキャレット位置は元のままなので、何か文字キーや矢印キーを押すと元の位置まで画面が戻ってしまい、スクロールした意味が無くなります。

{\b\cf4 NextLine}：チェックされていると、行頭から行末（或いはその逆）へ自動的にキャレットが移動してくれます。

{\b\cf4 TabIndent}：チェックされていて、AutoIndentもチェックされていれば、PrevSpaceIndentに関係なくTab文字を使ったオートタブインデントを行います。

{\b\cf4 PrevSpaceIndent}：チェックされていて、AutoIndentもチェックされていて、なおかつTabIndentがチェックされていなければスペース文字でオートタブインデントを行います。

{\b\cf4 SoftTab}：チェックされていると、タブ文字が入力された時タブ文字を TabSpaceCount を最大値とする空白に置き換えます。実際のTabコードは挿入されません。

{\b\cf4 TabSpaceCount}：タブ文字の巾を２，４，６，８のいずれかで指定します。

{\b\cf4 TEditorCaretStyle}：キャレット形状を指定します。cs_Defaultでは「{\b ｜}」、cs_Briefでは「{\b\fs28 _}」となります。

{\b\cf4 RowSelect}：チェックされていると、左余白内でマウスの左ボタンを押しながらマウスを動かすことにより、複数行をまとめて選択できるようになります。

{\b\cf4 SelMove}：チェックされていると、SelDragMode がdmAutomatic に設定されている時選択領域の文字列をマウスドラッグで移動することが出来ます。ドラッグ終了時にコントロールキー (CTRL) を押していると移動ではなく、コピーすることが出来ます。SelDragMode が dmManual の場合は、選択領域内 でマウスの左ボタンを押し下げても、ドラッグは開始されません。そこへキャレットが移動するだけです。そのままドラッグすると選択領域が変化します。

{\b\cf4 SelDragMode}：SelMove がチェックされている時の動作を指定します。SelMove がチェックされていない時は意味を持ちません。
・{\b dmAutomatic}・・・選択領域内 でマウスの左ボタンを押し下げ、マウスカーソルを少し移動すると、選択領域文字列のドラッグが開始されます。そのままドラッグしてドロップすると、選択文字列がキャレット位置に移動します。ドロップするとき、コントロールキー (CTRL) を押していると移動ではなく、コピーすることが出来ます。
・{\b dmManual}・・・選択領域内でマウスの左ボタンを押し下げても、ドラッグは開始されません。そこへキャレットが移動するだけです。そのままドラッグすると選択領域が変化します。

{\b\cf4 AutoCursor}：チェックされていると、編集エリア上のマウスカーソルの位置によってTEditorCursorで指定されたマウスカーソルアイコンに自動的に切り替わります。

{\b\cf5 <TEditorCursor>}：マウスカーソルの形状を設定します。
	{\b\cf4 DefaultCursor}：選択領域と左余白以外でのマウスカーソルを指定します。
	{\b\cf4 DragSelCursor}：選択領域の移動中に表示されるマウスカーソルを指定します。SelMove がチェックされていないとDragSelCursor の設定は無視されます。
	{\b\cf4 DragSelCopyCursor}：選択領域の移動中にコントロールキーが押された時に表示されるマウスカーソルを指定します。SelMove がチェックされていないとDragSelCopyCursor の設定は無視されます。
	{\b\cf4 InSelCursor}：選択領域内でのマウスカーソルを指定します。SelMove がチェックされていないとInSelCursor の設定は無視されます。
	{\b\cf4 LeftMarginCursor}：左余白内でのマウスカーソルを指定します。

{\b\cf4 右下の編集ボックス}：TEditorCursorの実験用にお使い下さい。


}end

//Page//
HLP000047
View Marks
View Marks
False
0


47
begin{
\keepn
「View Marks」タブページについて説明します。
\par\pard

キーワードの色分け、改行記号、ファイル終端記号、現在行を示す下線等、文字の外観に関わるほぼ全ての設定を行います。

{\b\cf6 キーワードとは}：本田勝彦氏のTEditorでは以下の種類の文字、単語、文字列をリアルタイムで判別し、指定された文字色、背景色、フォントスタイルで表示してくれます。

・半角空白(Color)
・半角英文字(Ank)
・コメント(Comment)
・全角文字(DBCS)
・半角数字(Int)
・文字列(Str)
・記号(Symbol)
・予約語(Reserve)
・URL(Url)
・Mailアドレス(Mail)
・選択領域(Select)

記号として表示されるため、フォントスタイルと背景色を指定できないものとして

・ファイル終端記号(EofMark)
・改行記号(RetMark)
・アンダーライン(Underline)
・折り返し記号(WrapMark)
・検索ヒット(FindMark)
・半角空白(SpaceMark)
・全角空白(DBSpaceMark)
・タブ文字(TabMark)
があります。

左上のリストから変更したい項目を選択し、右隣のカラーサンプルやスタイルを設定して下さい。

それでは、主な設定項目の解説を始めたいと思います。

{\b\cf6 Style}：キーワードが使うフォントスタイルを指定します。fsBold（太字）, fsItalic（斜体）, fsUnderline（下線つき）を組み合わせて指定することができます。

{\b\cf6 SameBkColor, SameColor, SameStyle}：他のキーワードの文字色、背景色、フォントスタイルを、現在選択されているキーワードの設定で統一します。

{\b\cf6 Mail}：チェックされていると、Mailアドレスの色分けが有効になります。

{\b\cf6 Url}：チェックされていると、URLの色分けが有効になります。

{\b\cf6 ControlCode(#)}：チェックされていると、# で始まる文字列は「文字列(Str)」と同じ設定が適用されます。主にPascalコードなどでは文字コードの識別子として# が用いられていることに因ります。

{\b\cf6 HexPrefix}：16進数を表すための頭文字を指定します。例えばC,C++では 0x です。

{\b\cf6 Quatation}：ソースコードとしてではなく、「文字列」として扱うための区切り文字を指定します。一文字で指定して下さい。殆どの場合 " か ' のはずです。

{\b\cf6 Commenter}：一行コメントのコメントマークです。例えばC++なら // となります。

{\b\cf6 <TEditorMarks>}：特殊記号の表示・非表示を設定します。
	{\b\cf2 RetMark}：チェックされていると改行記号を表示します。
	{\b\cf2 EofMark}：チェックされているとファイル終端記号(EOF)を表示します。
	{\b\cf2 Underline}：チェックされているとキャレットの現在の行位置を示すため、現在の行全体に下線が引かれます。下線の色はUnderlineで設定できます。
	{\b\cf2 WrapMark}：チェックされていると折り返し記号を表示します。
	{\b\cf2 FindMark}：チェックされていると、検索時にヒット語句に下線を引きます。
	{\b\cf2 SpaceMark}：チェックされていると、半角空白を色つきで表示します。
	{\b\cf2 DBSpaceMark}：チェックされていると、全角空白を色つきで表示します。
	{\b\cf2 TabMark}：チェックされていると、タブ文字を色つきで表示します。

{\b\cf6 <HitStyle>}：検索にヒットした語句の強調表示の仕方を設定します。
	{\b\cf2 hsSelect}：選択状態にします。
	{\b\cf2 hsDraw}：View.Colors.Hit で指定された背景色・前景色で描画します。
	{\b\cf2 hsCaret}：検索一致文字列長のキャレットを作成し、点滅させます。（折り返し、改行を含むヒット文字列には対応していません）

{\b\cf6 下の編集ボックス}：以上の設定を反映したテスト用編集領域です。カーソル移動もできますので、Underlineや選択領域の設定を確認してみて下さい。

}end

//Page//
HLP000048
Leftbar Ruler Margin
Leftbar Ruler Margin
False
0


48
begin{
\keepn
「Leftbar Ruler Margin」タブページについて説明します。
\par\pard

{\b\cf6 Leftbar}：行番号表示領域のことです。
{\b\cf6 Ruler}：桁数表示領域のことです。

Leftbar Ruler Margin タブページでは行桁数インジケーター、余白、字間、行間についての各種設定を変更することができます。では、機能の解説を始めます。

{\b\fs28\cf6 <カラーリスト>}：インジケーターのカラー設定を行います。
	{\b\cf2 Ruler}：桁数インジケーターの数字の色、背景色を指定します。
	{\b\cf2 Ruler.MarkColor}：現在のカーソルの桁位置を示す色を指定します。
	{\b\cf2 Leftbar}：行数インジケーターの数字の色、背景色を指定します。

{\b\fs28\cf6 <TEditorRuler>}：桁数インジケーターの設定を行います。
	{\b\cf2 Visible}：桁数インジケーターの表示・非表示を設定します。
	{\b\cf2 Edge}：桁数インジケーターを左端まで描画するか否かを設定します。
	{\b\cf2 GaugeRange}：桁数インジケーターの目盛り単位を指定します。10ずつか8ずつのいずれかを指定できます。

{\b\fs28\cf6 <TEditorLeftbar>}：行数インジケーターの設定を行います。
	{\b\cf2 Visible}：行数インジケーターの表示・非表示を設定します。
	{\b\cf2 Edge}：行数インジケーターを上端まで描画するか否かを設定します。
	{\b\cf2 ShowNumber}：行番号を表示するか否かを設定します。行数表示領域自体の描画とは無関係です。
	{\b\cf2 ZeroBase}：行番号の初期値（一番上の行）をゼロ行とするか否かを設定します。
	{\b\cf2 ZeroLead}：行番号の頭にゼロをつけるか否かを設定します。
	{\b\cf2 ShowNumberMode}：折り返し表示されている行をどうするか指定します。nmRowでは折り返された行もカウントします。nmLineでは折り返された行はカウントしません。
	{\b\cf2 Column}：行番号の桁数を設定します。1から8まで設定できます。
	{\b\cf2 LeftMargin}：行数インジケーターの左端と、行番号の左端との間のピクセル値を設定します。0から100まで設定できます。
	{\b\cf2 RightMargin}：行番号の右端と、行数インジケーターの右端との間のピクセル値を設定します。0から100まで設定できます。

{\b\fs28\cf6 <TEditorMargin>}：余白、行間、字間の設定を行います。
	{\b\cf2 Top}：上の余白を設定します。
	{\b\cf2 Left}：左余白を設定します。
	{\b\cf2 Line}：行間を設定します。
	{\b\cf2 Character}：字間を設定します。


}end

//Page//
HLP000049
Brackets
Brackets;囲み文字
False
0


49
begin{
\keepn
「Brackets」タブページについて説明します。
\par\pard

このタブページでは特定の文字列(Brackets)で囲まれた領域の背景色、文字色、フォントスタイルを指定します。

Brackets タブページの機能について解説します。

{\b\cf6 New}：新しい空（から）の囲み文字設定を追加します。{\b\fs28\cf6 登録できる囲み文字は最大14個までです。}

{\b\cf6 Remove}：現在左上のリストボックスで選択されている囲み文字設定を削除します。

{\b\cf6 Style}：囲み文字が使うフォントスタイルを指定します。fsBold（太字）, fsItalic（斜体）, fsUnderline（下線つき）を組み合わせて指定することができます。

{\b\cf6 LeftBracket, RightBracket}：LeftBracket, RightBracketに指定した文字列が「Bracket（囲み文字）」となります。例えばLeftBracketに/*、RightBracketに*/を指定すれば、{\cf2 /* abc */}は指定された文字色、背景色、スタイルで描画されることになります。ソースコードでは主に複数行に渡るコメント記号の代わりに用いられます。

LeftBracket, RightBracket には、空白を指定することは出来ません。また同じ文字列を指定することも出来ません。さらに、同じ種類の文字を使わなければなりません。以下は駄目な例です。

駄目な文字列 	なんでか？

今日の天気予報 	漢字とひらかなの混在
株式会社ホゲホゲ 	漢字とカタカナの混在

LeftBracket に '追伸'、RightBracket に 'でわでわ' というのは大丈夫です。
またLeftBracketが同じ設定も、動作の保証を致しません。例えば、
設定１：Left・・・#     Right・・・>
設定２：Left・・・#     Right・・・"
とすると、設定１と２のカラー設定がごっちゃになるばかりでなく、実際の色分けもうまくいきませんでした。

{\b\cf6 Update}：LeftBracket, RightBracketの変更を適用します。Newで新しく囲み文字を追加した場合は必ずLeftBracket, RightBracketを設定し、その後にUpdateで適用。登録して下さい。

{\b\cf6 SameBkColor, SameColor, SameStyle}：他の囲み文字の文字色、背景色、フォントスタイルを、現在選択されている囲み文字の設定で統一します。
}end

//Page//
HLP000050
ReserveWordList
ReserveWordList;予約語
False
0


50
begin{
\keepn
「ReserveWordList」タブページについて説明します。
\par\pard

{\b\fs28\cf6 予約語とは}：使用する言語特有のキーワードを通常指定します。C,CPPならifやwhileなどがこれにあたります。一単語ずつ改行で区切ったものが予約語リスト(Reserve Word List)になります。左の編集エリアで直接予約語を編集することができます。

予約語に指定された語句は、View Marks Margin タブページの「予約語(Reserve)」で指定された背景色・文字色・フォントスタイルで描画されます。

{\b\fs28\cf6 予約語の制限}：異なる種類の語句が混在する予約語は認識されません。

株式会社デルファイ、おらが「街」、よやくごだもんね〜、Delphiくらぶ、など漢字とかな混じり語句や、記号が途中にあるもの、半角全角混在語句は、予約語として識別されません。


ReserveWordList タブページの機能について解説します。

{\b\cf5 読み込み}：予約語がリストになって書かれている（と思われる）テキストファイルを開き、左の編集エリアに読み込みます。

{\b\cf5 書き出し}：左の編集エリアの内容を、名前を付けて保存します。

{\b\cf5 左の編集エリア}：予約語を編集します。

}end

//Page//
HLP000051
WordWrap
WordWrap;折り返し処理
False
0


51
begin{
\keepn
「WordWrap」タブページについて説明します。
\par\pard

折り返し処理の有無、折り返し処理を行う際のオプションを設定します。

{\b\cf4 WordWrap}：チェックすると折り返し処理がされるようになります。また、TEditorWrapOptionの設定が意味を持つようになります。チェックされていないと折り返し処理は行われず、TEditorWrapOptionの設定も意味を持ちません。

{\b\cf4 FollowPunctuation}：チェックすると、折り返し処理を行う際、PunctuationStrで設定されている句読点を WrapByte値 + 3 を限度として行末に残します。

{\b\cf4 FollowReturnMark}：チェックされている場合は、折り返し処理を行う際、改行文字をぶら下げます。WrapByteで設定した長さの行文字列がある場合は、次の行が改行だけの空白行になりますが、それを回避し、改行マークを行末に残すためのチェックボックスです。

{\b\cf4 Leading}：チェックされていると、折り返し処理を行う際、追い出し処理を行います。追い出し処理とは、行末禁則文字（LeadStr）や行頭禁則文字（FollowStr）の位置を考慮して折り返し位置を調節することを言います。追い出される文字数は、WrapByte の４／５を限度としています

{\b\cf4 WordBreak}：折り返し処理を行う際、英文ワードラップ処理を行います。

FitWrap：オリジナル機能を実装する予定でしたが現時点では無理でした。現在使用不可。

{\b\cf4 WrapByte}：折り返し処理を行う文字数を半角英数文字数で決めます。指定出来る数値は、20から250までです。

{\b\cf4 FollowStr}：折り返し処理を行う際の、行頭禁則文字として扱う文字を決めます。

{\b\cf4 LeadStr}：折り返し処理を行う際の、行末禁則文字として扱う文字を決めます。

{\b\cf4 PunctuationStr}：折り返し処理を行う際の、句読点として扱う文字を決めます




}end

//Page//
HLP000011
おまけ

False
1


11
begin{

}end

//Page//
HLP000039
文字色設定のコツ
文字色設定のコツ
False
0


39
begin{
\keepn
文字色設定のコツ
\par\pard

Ceta はユーザーご自身の手によってかなり詳細な文字色設定ができるようになっています。キーワード、予約語、囲み文字がその主な要素ではないでしょうか。

とはいっても、対応させるソースコードの種類（C,CPPか、htmlか、等々）によってはすんなり望み通りの設定をできないものも出てくると思います。そう言ったときにはあっさり妥協するか、以下の「設定のポイント」を参考にしていただいて各々味のある設定を創り上げて下さい。


{\b\cf6 設定のポイントその壱（例：C,CPPソースコード）}

・TurboC++準拠にするとなると、やはり背景色はclNavy（藍色に近い）で統一でしょう。文字列はclLime（黄緑）かclAqua（水色）、半角数字はclAquaで大丈夫です。
半角英文字だけはclYellow（黄色）にしておき、予約語はclWhite（白）。予約語ファイルはC, C++ の制御文、宣言などをまとめておけば特に問題有りません。

・{\b ここでのポイントはコメントとプリプロセッサ文でしょう。まずコメントです。}Cetaの仕様として普通にコメント(Comment）として設定できるのは一行コメントのみ。となるとC++の「//」コメントがこれにあたります。ではCの「/* */」コメントはどうなるかというと・・・囲み文字を使います。BracketでNewを選び、新しい囲み文字を追加します。次ぎにLeftBracketに「/*」、RightBracketに「*/」を指定し、Updateします。色はTurboC++準拠なら背景はclNavyに文字色はclGray（濃い灰色）となるでしょう。これでコメントに関してはクリアできました。

・{\b 問題はプリプロセッサ文です。}基本的に#で始まるのがそうです、が。Ceta ではある文字列で始まる一行を色分けするのはComment一つしか有りません。CommentはすでにC++用のコメントで使われています。となるとどうにかして他の仕組みを使ってプリプロセッサ文を考えなくてはいけません。プリプロセッサ文はその性質から予約語として扱うわけにもいきません。第一TurboC++準拠にするとなるとプリプロセッサ文は黄緑で表示される必要があります。散々考え、実験した末・・・諦めました。プリプロセッサ文は色分けは無理です。ただそのままでは見難いので、ControlCode(#)をチェックしておきましょう。頭の#マークだけ色が変わるはずです。これで満足と言うことにするほか有りません。というわけで、どなたかプリプロセッサ文まで完全に色分けができた方は教えて下さい。

{\b\cf6 設定のポイントその弐（例：htmlソースコード）}

・C,C++ 等と同様に考えるとタグをひたすら列挙した予約語ファイルが有ればそれでよいようにも考えられます。実際、本番用ではそのようにしています。ですがここでは少々変則的なやり方を紹介します。このやり方は最初、タグを打ち込むのがめんどくさくてどうにかして予約語ファイル無しでうまくいかないか、といじくったなかでも比較的良くできたやり方です。
・ポイントはタグは必ず<>で囲まれている。裏を返せば、普通の（つまりホームページとして表示すべき）文字列は><で囲まれている、と見るところにあります。つまり囲み文字として><を指定し、それを普通の文字列として色分けをするのです。多少見え方が変になるシーンもありますが、参考までにこうした{\b 逆転的な設定が案外うまくいく}場面もあるかと思います。
・大文字、小文字両方の場合のタグを書き付けた予約語ファイルを使えばすんなりとHTML設定をする事ができます。しかしその場合、「画面に表示する文章中に出てくるタグ文字列までも色分けされてしまう」という問題が出てきます。例えば下のような場合です。
<A HREF="http://tekitounawwwpeiji/index.html">The html source code of This page is very useful</A>
　この場合通常文字列として表示するべき「html」までも予約語として色分けされてしまいます。これを避けるためには先の「逆><囲み文字」を併用するのも一つの手段かもしれません。


　たった二つの事例しか紹介できませんでしたが、パズルを解くような感覚で設定を楽しんでいただければ幸いです。

}end

//Page//
HLP000041
作者の独り言
作者の独り言
False
0


41
begin{
\keepn
作者のご挨拶
\par\pard

〜ご挨拶〜

以下、Ceta Ver 2.60製作完了に際して。

「
　みなさまこの度は汎用エディター「Ceta(ツェータ)」をお求めいただき有り難うございます。以前のバージョンからお使いいただいている方には引き続きのご利用、感謝します。初めてお使いいただく方には、どうか本ソフトの特徴を使いこなしていただき、末永くご利用いただければ幸いです。

　Cetaは汎用を目指してしまったために初心者にはやや敷居の高く、中級以上の人には物足りないといういかにも中途半端なエディターになってしまいました。ただ、私の使いたいものを目指していくとこうなってしまったのです。

　文字色設定にフルアクセスできて、外部コマンドを通せば文字コードの変換もできて、いろんなコンパイラを柔軟に登録できて、ヘルプファイルも登録、閲覧できて・・・。
　メイクファイルの自動生成やプロジェクトファイルの自動生成はBuilderやVCに任せればいいので要らないし。

　結局現在のCetaができあがりました。
　また、Cetaを作ってきた足跡はすなわち、C++Builderプログラミングの学習の足跡でもあります。

　今回のバージョンアップは実は、全く予期していなかったことでした。
　というのは、「界」(Khai：カイ）という汎用MDIアプリケーションフレームワークを先に研究していたのです。Cetaは、界のモジュールとして実装される予定でした。しかし、Builder/DelphiのVCL構造はMDI子ウインドウをDLL化するのを予想していなかったこともあり、「界」は頓挫しました。
　しかし、その過程でいろいろ有用なクラスとか枠組みを作ることができました。そこで、Cetaにそれら「界」の副産物を利用して事実上の最終バージョンアップを施そう、ということになりました。
　これが、Ver 2.60の生まれた背景です。

　Ver 2.60で、今まで私がテキストエディタに要求していた機能をほぼ全て実装することができました。これ以上の大きな機能追加は、思いつかないというのが正直なところです。
　これ以上凝ったものを要求するなら、市販のものやプログラミングであるならば対象言語に特化したエディタを利用した方が、作者にとってもユーザーにとっても無駄がないでしょう。

　以上の理由から、細かいバグフィクスを除き、本バージョンをCetaの最終バージョンとします。

　Cetaに物足りなさを感じで、さらなるマクロ機能や検索・置換・ツールバーのカスタマイズ・ファイルの関連づけ・HTML編集機能・豊富なドキュメントとオプションプラグインを必要としたらぜひ秀丸を使って下さい。
　強力故に、どこでも使われているからです。
」

#(このマークはUNIX文化ではコメントの意味。読みたい人だけ
#読めばよいし、書いてあることを真に受ける必要はない、という意味）

#　最後にこれだけは心の中でつぶやかせてください。
# Cetaは、最強であり、最凶であり、最後のエディタです。
# 私は、他のいかなるWindows上のエディタよりも、Cetaが好きです。

}end

//End//
